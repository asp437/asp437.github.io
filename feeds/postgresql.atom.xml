<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Aleksandr Parfenov's Blog - PostgreSQL</title><link href="https://asp437.github.io/" rel="alternate"></link><link href="https://asp437.github.io/feeds/postgresql.atom.xml" rel="self"></link><id>https://asp437.github.io/</id><updated>2017-10-13T00:00:00+03:00</updated><entry><title>PostgreSQL Flexible Full TextÂ Search</title><link href="https://asp437.github.io/posts/pgconfeu17-fts.html" rel="alternate"></link><published>2017-10-13T00:00:00+03:00</published><updated>2017-10-13T00:00:00+03:00</updated><author><name>Aleksandr Parfenov</name></author><id>tag:asp437.github.io,2017-10-13:/posts/pgconfeu17-fts.html</id><summary type="html">&lt;p&gt;This post is textual appendix for &lt;a href="https://www.postgresql.eu/events/schedule/pgconfeu2017/session/1595-flexible-full-text-search/"&gt;PgConf.&lt;span class="caps"&gt;EU&lt;/span&gt; conference talk&lt;/a&gt;
done by &lt;em&gt;Arthur Zakirov&lt;/em&gt; and me.
This post contains some additional details about each component of &lt;strong&gt;&lt;span class="caps"&gt;FTS&lt;/span&gt;&lt;/strong&gt; in &lt;strong&gt;PostgreSQL&lt;/strong&gt;, example database with examples code snippets and dataset and scripts used in&amp;nbsp;benchmarks.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This post is textual appendix for &lt;a href="https://www.postgresql.eu/events/schedule/pgconfeu2017/session/1595-flexible-full-text-search/"&gt;PgConf.&lt;span class="caps"&gt;EU&lt;/span&gt; conference talk&lt;/a&gt;
done by &lt;em&gt;Arthur Zakirov&lt;/em&gt; and me.
This post contains some additional details about each component of &lt;strong&gt;&lt;span class="caps"&gt;FTS&lt;/span&gt;&lt;/strong&gt; in &lt;strong&gt;PostgreSQL&lt;/strong&gt;, example database with examples code snippets and dataset and scripts used in&amp;nbsp;benchmarks.&lt;/p&gt;


&lt;h2&gt;Full Text Search&amp;nbsp;problems&lt;/h2&gt;
&lt;p&gt;There are a lot of systems which require to search on a text data such search bar on a blog, e-market, news site, etc.
In all mentioned situations user wants to get some information which contains a word or few which he knows.
There are basic solutions like searching for substrings which can be implemented as a regular expression.
Since in a lot of languages each word can be presented in different forms and have synonyms, simple pattern matching is not good solution for that type of&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;Full Text Search is a way to process a text into lexemes, sequence of letters with the meaning represented words.
One of the most popular example is representation of a word as a initial form of it. For example word &lt;code&gt;better&lt;/code&gt; become &lt;code&gt;good&lt;/code&gt;, &lt;code&gt;been&lt;/code&gt; translated into &lt;code&gt;be&lt;/code&gt;,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;An &lt;span class="caps"&gt;FTS&lt;/span&gt; engine in &lt;strong&gt;PostgreSQL&lt;/strong&gt; provides powerful tools for processing text and solve a wide range of text search&amp;nbsp;problems.&lt;/p&gt;
&lt;h2&gt;Basic &lt;span class="caps"&gt;FTS&lt;/span&gt;&amp;nbsp;components&lt;/h2&gt;
&lt;p&gt;First of all, lets introduce main terms used in &lt;span class="caps"&gt;FTS&lt;/span&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Token&lt;/strong&gt; - a sequence of characters which represent a word or other atomic parse element of language. Contains type of token (name) and&amp;nbsp;value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lexeme&lt;/strong&gt; - in a &lt;strong&gt;PostgreSQL&lt;/strong&gt; token which were processed by the dictionary and been&amp;nbsp;normalized.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text&lt;/strong&gt; - a sequence of characters which can be transformed into sequence of&amp;nbsp;tokens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Document&lt;/strong&gt; - a unit of&amp;nbsp;searching.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is important to distinguish tokens and lexemes, since tokens represent words after parsing and before dictionary processing, but lexemes represent word after both&amp;nbsp;steps.&lt;/p&gt;
&lt;p&gt;Before moving to description of processing and search documents, let&amp;#8217;s introduce data types used for &lt;span class="caps"&gt;FTS&lt;/span&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tsvector&lt;/strong&gt; - contains data of document after processing. Consist of lexemes with optional positions of a&amp;nbsp;document.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tsquery&lt;/strong&gt; - contains data of text search query. Consist of lexemes operands and operators such as &lt;em&gt;&lt;span class="caps"&gt;AND&lt;/span&gt;&lt;/em&gt;, &lt;em&gt;&lt;span class="caps"&gt;OR&lt;/span&gt;&lt;/em&gt;, &lt;em&gt;&lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/em&gt; and special phrase operator &lt;em&gt;&amp;lt;N&gt;&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="PostgreSQL"></category><category term="FTS"></category><category term="Conferences"></category></entry></feed>